#!/usr/bin/with-contenv bashio
# ==============================================================================
# Start the example service
# s6-overlay docs: https://github.com/just-containers/s6-overlay
# ==============================================================================
set +e


bashio::config 'backups' | jq -cr '.[]' | while read backup
do

export RESTIC_REPOSITORY=$(echo $backup | jq 'repository.location')
export RESTIC_PASSWORD=$(echo $backup | jq 'repository.password')
export RESTIC_COMPRESSION=$(echo $backup | jq 'backup.compression')
export RESTIC_BACKUP_HOST=$(echo $backup | jq 'backup.host')
export RESTIC_BACKUP_TAG=$(echo $backup | jq 'backup.tag')
export RESTIC_TARGETS=$(echo $backup | jq -cr 'targets' | tr '\n' ' ')
export RESTIC_PROGRESS_FPS="0.016666"

echo "Repository: $RESTIC_REPOSITORY"
echo "Host: $RESTIC_BACKUP_HOST"
echo "Tag: $RESTIC_BACKUP_TAG"
echo "Targets: $RESTIC_TARGETS"

## Check whether repository is initialized
restic cat config
configValid=$?
if [ $configValid -ne 0 ]
then
    mkdir -p "$(bashio::config 'repository.location')"
    restic init
fi

# Run your program
restic backup \
    --host "$RESTIC_BACKUP_HOST" \
    --tag "$RESTIC_BACKUP_TAG" \
    --exclude-caches \
    $RESTIC_TARGETS

if [ $? -eq 0 ]
then 
  backupState=ok
else
  backupState=fail
fi

stats=$(restic --json stats --mode raw-data)
snapshots=$(restic --json snapshots)
authHeader="Authorization: Bearer ${SUPERVISOR_TOKEN}"

echo ""
echo "Send stats to Home Assistant"
echo "{ \"state\": \"$backupState\", \"attributes\": $stats }" \
    | curl -vvvv \
        --header "$authHeader" \
        --json @- \
        --trace-ascii - \
        http://supervisor/core/api/states/sensor.restic_addon_stats

echo ""
echo "Send snapshots to Home Assistant"
echo "{ \"state\": \"$backupState\", \"attributes\": { \"snapshots\": $snapshots } }" \
    | curl -vvvv \
        --header "$authHeader" \
        --json @- \
        --trace-ascii - \
        http://supervisor/core/api/states/sensor.restic_addon_snapshots

done